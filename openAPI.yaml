openapi: 3.0.3
info:
  title: Brain.Academy
  description: This is API for Group Project By Alterra Academy
  version: "1.0.0"
  contact:
    email: alfianadityadwi@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALFIANADSAPUTRA_1/DashboardQ/1.0.0
  # Main URL
  - description: Main URL
    url: URL will be update soon
tags:
  - name: login
    description: endpoint for verifying who a user is
  - name: admin
  - name: user

paths:
  /registeruser:
    post:
      tags:
        - "admin"
      summary: "register new user"
      description: "feature for admin register new user"
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                birth_date:
                  type: string
                gender:
                  type: string
                address:
                  type: string
                role:
                  type: string
                team:
                  type: string
                status:
                  type: string
                phone:
                  type: string
                password:
                  type: string
                  format: password
            example:
              name: "alfian aditya"
              email: "alfian@example.com"
              birth_date: "2020-02-20"
              gender: "male"
              address: "jln. Merpati No 18, Kasihan, Bantul, Yogyakarta, 55184"
              role: "User"
              team: "Academy"
              status: "Active"
              phone: "0812334455"
              password: "alifganteng"
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success create account"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /login:
    post:
      tags:
        - "login"
      summary: "login account"
      description: "feature for verifying who a admin or user is"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: "alfian@example.com"
              password: "alifganteng"
      responses:
        200:
          description: "success login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 6
                  full_name: "alfian aditya"
                  email: "alfian@example.com"
                  gender: "Male"
                  role: "User"
                  team: "Academy"
                  phone: "0812334455"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
                message: "login success"
        400:
          $ref: "#/components/responses/400"
        404:
          description: "data not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "account not registered"
        500:
          $ref: "#/components/responses/500"

  /users:
    get:
      tags:
        - "admin"
      summary: "get all user data"
      description: "feature add all users data"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "success show users data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObjectArr"
              example:
                data:
                  - id: 2
                    name: "Azura Namini"
                    email: "azure@example.com"
                    team: "Admission"
                    role: "User"
                    status: "Active"
                  - id: 3
                    name: "Muhammad Arnold"
                    email: "marnold@example.com"
                    team: "Placement"
                    role: "User"
                    status: "Active"
                  - id: 4
                    name: "Beni Kurnia"
                    email: "benkur@example.com"
                    team: "Mentor"
                    role: "User"
                    status: "Active"
                  - id: 5
                    name: "Miranda Ramadhan"
                    email: "miranda@example.com"
                    team: "Placement"
                    role: "User"
                    status: "Non-Active"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /users/profile:
    get:
      tags:
        - "user"
      summary: "get user profile by user"
      description: "feature for get user detail account"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "success show user profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 6
                  name: "alfian aditya"
                  email: "alfian@example.com"
                  birth_date: "2020-02-20"
                  gender: "male"
                  address: "Bantul, Yogyakarta, 55184"
                  role: "User"
                  team: "Academy"
                  status: "Active"
                  phone: "0812334455"
                message: "success show profile"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /users/{id}:
    put:
      tags:
        - "admin"
      summary: "edit user profile"
      description: "feature for edit user profile"
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              name: "Azura Namini"
              email: "azure@example.com"
              team: "Placement"
              role: "User"
              status: "Active"
      responses:
        200:
          description: "success update profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 2
                  name: "Azura Namini"
                  email: "azure@example.com"
                  team: "Placement"
                  role: "User"
                  status: "Active"
                message: "success update profile"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - "admin"
      summary: "get user profile by admin"
      description: "feature for edit user profile"
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "success show user profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 6
                  name: "alfian aditya"
                  email: "alfian@example.com"
                  birth_date: "2020-02-20"
                  gender: "male"
                  address: "Bantul, Yogyakarta, 55184"
                  role: "User"
                  team: "Academy"
                  status: "Active"
                  phone: "0812334455"
                message: "success show profile"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - "admin"
      summary: "deactive user account"
      description: "feature for deactive user account"
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "success deactive user profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success deactive user profile"
        400:
          $ref: "#/components/responses/400"
        404:
          description: "data not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "account not registered"
        500:
          $ref: "#/components/responses/500"

components:
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        message:
          type: string

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  responses:
    400:
      description: "error from user"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "wrong input"
    500:
      description: "error from server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "server problem"

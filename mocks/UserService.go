// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	users "dashboardq-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Deactive provides a mock function with given fields: token, userID
func (_m *UserService) Deactive(token interface{}, userID uint) error {
	ret := _m.Called(token, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *UserService) Login(email string, password string) (string, users.Core, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 users.Core
	if rf, ok := ret.Get(1).(func(string, string) users.Core); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(users.Core)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Profile provides a mock function with given fields: token, userID
func (_m *UserService) Profile(token interface{}, userID uint) (users.Core, error) {
	ret := _m.Called(token, userID)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint) users.Core); ok {
		r0 = rf(token, userID)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: token, newUser
func (_m *UserService) Register(token interface{}, newUser users.Core) (users.Core, error) {
	ret := _m.Called(token, newUser)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(interface{}, users.Core) users.Core); ok {
		r0 = rf(token, newUser)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, users.Core) error); ok {
		r1 = rf(token, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *UserService) ShowAll() ([]users.Core, error) {
	ret := _m.Called()

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func() []users.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, newUpdate
func (_m *UserService) Update(token interface{}, newUpdate users.Core) (users.Core, error) {
	ret := _m.Called(token, newUpdate)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(interface{}, users.Core) users.Core); ok {
		r0 = rf(token, newUpdate)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, users.Core) error); ok {
		r1 = rf(token, newUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdm provides a mock function with given fields: token, userID, newUpdate
func (_m *UserService) UpdateAdm(token interface{}, userID uint, newUpdate users.Core) (users.Core, error) {
	ret := _m.Called(token, userID, newUpdate)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, users.Core) users.Core); ok {
		r0 = rf(token, userID, newUpdate)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, users.Core) error); ok {
		r1 = rf(token, userID, newUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	users "dashboardq-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserData type
type UserData struct {
	mock.Mock
}

// Deactive provides a mock function with given fields: adminID, userID
func (_m *UserData) Deactive(adminID uint, userID uint) error {
	ret := _m.Called(adminID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(adminID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email
func (_m *UserData) Login(email string) (users.Core, error) {
	ret := _m.Called(email)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(string) users.Core); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Profile provides a mock function with given fields: userID
func (_m *UserData) Profile(userID uint) (users.Core, error) {
	ret := _m.Called(userID)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(uint) users.Core); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: adminID, newUser
func (_m *UserData) Register(adminID uint, newUser users.Core) (users.Core, error) {
	ret := _m.Called(adminID, newUser)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(uint, users.Core) users.Core); ok {
		r0 = rf(adminID, newUser)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, users.Core) error); ok {
		r1 = rf(adminID, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *UserData) ShowAll() ([]users.Core, error) {
	ret := _m.Called()

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func() []users.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, newUpdate
func (_m *UserData) Update(userID uint, newUpdate users.Core) (users.Core, error) {
	ret := _m.Called(userID, newUpdate)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(uint, users.Core) users.Core); ok {
		r0 = rf(userID, newUpdate)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, users.Core) error); ok {
		r1 = rf(userID, newUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdm provides a mock function with given fields: adminID, userID, newUpdate
func (_m *UserData) UpdateAdm(adminID uint, userID uint, newUpdate users.Core) (users.Core, error) {
	ret := _m.Called(adminID, userID, newUpdate)

	var r0 users.Core
	if rf, ok := ret.Get(0).(func(uint, uint, users.Core) users.Core); ok {
		r0 = rf(adminID, userID, newUpdate)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, users.Core) error); ok {
		r1 = rf(adminID, userID, newUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

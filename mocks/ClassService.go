// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	class "dashboardq-be/features/class"

	mock "github.com/stretchr/testify/mock"
)

// ClassService is an autogenerated mock type for the ClassService type
type ClassService struct {
	mock.Mock
}

// Create provides a mock function with given fields: token, newClass
func (_m *ClassService) Create(token interface{}, newClass class.Core) (class.Core, error) {
	ret := _m.Called(token, newClass)

	var r0 class.Core
	if rf, ok := ret.Get(0).(func(interface{}, class.Core) class.Core); ok {
		r0 = rf(token, newClass)
	} else {
		r0 = ret.Get(0).(class.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, class.Core) error); ok {
		r1 = rf(token, newClass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, classID
func (_m *ClassService) Delete(token interface{}, classID uint) error {
	ret := _m.Called(token, classID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, classID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Show provides a mock function with given fields: classID
func (_m *ClassService) Show(classID uint) (class.Core, error) {
	ret := _m.Called(classID)

	var r0 class.Core
	if rf, ok := ret.Get(0).(func(uint) class.Core); ok {
		r0 = rf(classID)
	} else {
		r0 = ret.Get(0).(class.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(classID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowAll provides a mock function with given fields:
func (_m *ClassService) ShowAll() ([]class.Core, error) {
	ret := _m.Called()

	var r0 []class.Core
	if rf, ok := ret.Get(0).(func() []class.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]class.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, classID, newUpdate
func (_m *ClassService) Update(token interface{}, classID uint, newUpdate class.Core) (class.Core, error) {
	ret := _m.Called(token, classID, newUpdate)

	var r0 class.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, class.Core) class.Core); ok {
		r0 = rf(token, classID, newUpdate)
	} else {
		r0 = ret.Get(0).(class.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, class.Core) error); ok {
		r1 = rf(token, classID, newUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClassService interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassService creates a new instance of ClassService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassService(t mockConstructorTestingTNewClassService) *ClassService {
	mock := &ClassService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
